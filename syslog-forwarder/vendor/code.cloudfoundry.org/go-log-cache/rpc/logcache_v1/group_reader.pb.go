// Code generated by protoc-gen-go. DO NOT EDIT.
// source: group_reader.proto

package logcache_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import loggregator_v2 "code.cloudfoundry.org/go-loggregator/rpc/loggregator_v2"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type AddToGroupRequest struct {
	Name      string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	SourceId  string `protobuf:"bytes,2,opt,name=source_id,json=sourceId" json:"source_id,omitempty"`
	LocalOnly bool   `protobuf:"varint,3,opt,name=local_only,json=localOnly" json:"local_only,omitempty"`
}

func (m *AddToGroupRequest) Reset()                    { *m = AddToGroupRequest{} }
func (m *AddToGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*AddToGroupRequest) ProtoMessage()               {}
func (*AddToGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *AddToGroupRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AddToGroupRequest) GetSourceId() string {
	if m != nil {
		return m.SourceId
	}
	return ""
}

func (m *AddToGroupRequest) GetLocalOnly() bool {
	if m != nil {
		return m.LocalOnly
	}
	return false
}

type AddToGroupResponse struct {
}

func (m *AddToGroupResponse) Reset()                    { *m = AddToGroupResponse{} }
func (m *AddToGroupResponse) String() string            { return proto.CompactTextString(m) }
func (*AddToGroupResponse) ProtoMessage()               {}
func (*AddToGroupResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type RemoveFromGroupRequest struct {
	Name      string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	SourceId  string `protobuf:"bytes,2,opt,name=source_id,json=sourceId" json:"source_id,omitempty"`
	LocalOnly bool   `protobuf:"varint,3,opt,name=local_only,json=localOnly" json:"local_only,omitempty"`
}

func (m *RemoveFromGroupRequest) Reset()                    { *m = RemoveFromGroupRequest{} }
func (m *RemoveFromGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveFromGroupRequest) ProtoMessage()               {}
func (*RemoveFromGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *RemoveFromGroupRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RemoveFromGroupRequest) GetSourceId() string {
	if m != nil {
		return m.SourceId
	}
	return ""
}

func (m *RemoveFromGroupRequest) GetLocalOnly() bool {
	if m != nil {
		return m.LocalOnly
	}
	return false
}

type RemoveFromGroupResponse struct {
}

func (m *RemoveFromGroupResponse) Reset()                    { *m = RemoveFromGroupResponse{} }
func (m *RemoveFromGroupResponse) String() string            { return proto.CompactTextString(m) }
func (*RemoveFromGroupResponse) ProtoMessage()               {}
func (*RemoveFromGroupResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

type GroupReadRequest struct {
	Name          string         `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	RequesterId   uint64         `protobuf:"varint,2,opt,name=requester_id,json=requesterId" json:"requester_id,omitempty"`
	StartTime     int64          `protobuf:"varint,3,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndTime       int64          `protobuf:"varint,4,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	Limit         int64          `protobuf:"varint,5,opt,name=limit" json:"limit,omitempty"`
	EnvelopeTypes []EnvelopeType `protobuf:"varint,6,rep,packed,name=envelope_types,json=envelopeTypes,enum=logcache.v1.EnvelopeType" json:"envelope_types,omitempty"`
	LocalOnly     bool           `protobuf:"varint,7,opt,name=local_only,json=localOnly" json:"local_only,omitempty"`
}

func (m *GroupReadRequest) Reset()                    { *m = GroupReadRequest{} }
func (m *GroupReadRequest) String() string            { return proto.CompactTextString(m) }
func (*GroupReadRequest) ProtoMessage()               {}
func (*GroupReadRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *GroupReadRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GroupReadRequest) GetRequesterId() uint64 {
	if m != nil {
		return m.RequesterId
	}
	return 0
}

func (m *GroupReadRequest) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *GroupReadRequest) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *GroupReadRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GroupReadRequest) GetEnvelopeTypes() []EnvelopeType {
	if m != nil {
		return m.EnvelopeTypes
	}
	return nil
}

func (m *GroupReadRequest) GetLocalOnly() bool {
	if m != nil {
		return m.LocalOnly
	}
	return false
}

type GroupReadResponse struct {
	Envelopes *loggregator_v2.EnvelopeBatch `protobuf:"bytes,1,opt,name=envelopes" json:"envelopes,omitempty"`
}

func (m *GroupReadResponse) Reset()                    { *m = GroupReadResponse{} }
func (m *GroupReadResponse) String() string            { return proto.CompactTextString(m) }
func (*GroupReadResponse) ProtoMessage()               {}
func (*GroupReadResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *GroupReadResponse) GetEnvelopes() *loggregator_v2.EnvelopeBatch {
	if m != nil {
		return m.Envelopes
	}
	return nil
}

type GroupRequest struct {
	Name      string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	LocalOnly bool   `protobuf:"varint,2,opt,name=local_only,json=localOnly" json:"local_only,omitempty"`
}

func (m *GroupRequest) Reset()                    { *m = GroupRequest{} }
func (m *GroupRequest) String() string            { return proto.CompactTextString(m) }
func (*GroupRequest) ProtoMessage()               {}
func (*GroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *GroupRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GroupRequest) GetLocalOnly() bool {
	if m != nil {
		return m.LocalOnly
	}
	return false
}

type GroupResponse struct {
	SourceIds    []string `protobuf:"bytes,1,rep,name=source_ids,json=sourceIds" json:"source_ids,omitempty"`
	RequesterIds []uint64 `protobuf:"varint,2,rep,packed,name=requester_ids,json=requesterIds" json:"requester_ids,omitempty"`
}

func (m *GroupResponse) Reset()                    { *m = GroupResponse{} }
func (m *GroupResponse) String() string            { return proto.CompactTextString(m) }
func (*GroupResponse) ProtoMessage()               {}
func (*GroupResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *GroupResponse) GetSourceIds() []string {
	if m != nil {
		return m.SourceIds
	}
	return nil
}

func (m *GroupResponse) GetRequesterIds() []uint64 {
	if m != nil {
		return m.RequesterIds
	}
	return nil
}

func init() {
	proto.RegisterType((*AddToGroupRequest)(nil), "logcache.v1.AddToGroupRequest")
	proto.RegisterType((*AddToGroupResponse)(nil), "logcache.v1.AddToGroupResponse")
	proto.RegisterType((*RemoveFromGroupRequest)(nil), "logcache.v1.RemoveFromGroupRequest")
	proto.RegisterType((*RemoveFromGroupResponse)(nil), "logcache.v1.RemoveFromGroupResponse")
	proto.RegisterType((*GroupReadRequest)(nil), "logcache.v1.GroupReadRequest")
	proto.RegisterType((*GroupReadResponse)(nil), "logcache.v1.GroupReadResponse")
	proto.RegisterType((*GroupRequest)(nil), "logcache.v1.GroupRequest")
	proto.RegisterType((*GroupResponse)(nil), "logcache.v1.GroupResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GroupReader service

type GroupReaderClient interface {
	AddToGroup(ctx context.Context, in *AddToGroupRequest, opts ...grpc.CallOption) (*AddToGroupResponse, error)
	RemoveFromGroup(ctx context.Context, in *RemoveFromGroupRequest, opts ...grpc.CallOption) (*RemoveFromGroupResponse, error)
	Read(ctx context.Context, in *GroupReadRequest, opts ...grpc.CallOption) (*GroupReadResponse, error)
	Group(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*GroupResponse, error)
}

type groupReaderClient struct {
	cc *grpc.ClientConn
}

func NewGroupReaderClient(cc *grpc.ClientConn) GroupReaderClient {
	return &groupReaderClient{cc}
}

func (c *groupReaderClient) AddToGroup(ctx context.Context, in *AddToGroupRequest, opts ...grpc.CallOption) (*AddToGroupResponse, error) {
	out := new(AddToGroupResponse)
	err := grpc.Invoke(ctx, "/logcache.v1.GroupReader/AddToGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupReaderClient) RemoveFromGroup(ctx context.Context, in *RemoveFromGroupRequest, opts ...grpc.CallOption) (*RemoveFromGroupResponse, error) {
	out := new(RemoveFromGroupResponse)
	err := grpc.Invoke(ctx, "/logcache.v1.GroupReader/RemoveFromGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupReaderClient) Read(ctx context.Context, in *GroupReadRequest, opts ...grpc.CallOption) (*GroupReadResponse, error) {
	out := new(GroupReadResponse)
	err := grpc.Invoke(ctx, "/logcache.v1.GroupReader/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupReaderClient) Group(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*GroupResponse, error) {
	out := new(GroupResponse)
	err := grpc.Invoke(ctx, "/logcache.v1.GroupReader/Group", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GroupReader service

type GroupReaderServer interface {
	AddToGroup(context.Context, *AddToGroupRequest) (*AddToGroupResponse, error)
	RemoveFromGroup(context.Context, *RemoveFromGroupRequest) (*RemoveFromGroupResponse, error)
	Read(context.Context, *GroupReadRequest) (*GroupReadResponse, error)
	Group(context.Context, *GroupRequest) (*GroupResponse, error)
}

func RegisterGroupReaderServer(s *grpc.Server, srv GroupReaderServer) {
	s.RegisterService(&_GroupReader_serviceDesc, srv)
}

func _GroupReader_AddToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupReaderServer).AddToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logcache.v1.GroupReader/AddToGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupReaderServer).AddToGroup(ctx, req.(*AddToGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupReader_RemoveFromGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFromGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupReaderServer).RemoveFromGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logcache.v1.GroupReader/RemoveFromGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupReaderServer).RemoveFromGroup(ctx, req.(*RemoveFromGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupReader_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupReaderServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logcache.v1.GroupReader/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupReaderServer).Read(ctx, req.(*GroupReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupReader_Group_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupReaderServer).Group(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logcache.v1.GroupReader/Group",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupReaderServer).Group(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GroupReader_serviceDesc = grpc.ServiceDesc{
	ServiceName: "logcache.v1.GroupReader",
	HandlerType: (*GroupReaderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddToGroup",
			Handler:    _GroupReader_AddToGroup_Handler,
		},
		{
			MethodName: "RemoveFromGroup",
			Handler:    _GroupReader_RemoveFromGroup_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _GroupReader_Read_Handler,
		},
		{
			MethodName: "Group",
			Handler:    _GroupReader_Group_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "group_reader.proto",
}

func init() { proto.RegisterFile("group_reader.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 555 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xc1, 0x6e, 0xd3, 0x4c,
	0x10, 0x56, 0xe2, 0xb4, 0x8d, 0x27, 0x49, 0xff, 0x66, 0xd5, 0x9f, 0x3a, 0x86, 0xb4, 0x69, 0x8a,
	0x44, 0x94, 0x43, 0xac, 0x86, 0x23, 0x42, 0xa2, 0x48, 0x80, 0x38, 0x81, 0x4c, 0xae, 0xc8, 0x5a,
	0xec, 0x91, 0x63, 0xc9, 0xf6, 0x9a, 0xdd, 0x8d, 0xa5, 0xa8, 0xea, 0x05, 0x89, 0x27, 0xe0, 0xb9,
	0x38, 0xf1, 0x0a, 0x3c, 0x05, 0x27, 0x94, 0xb5, 0x93, 0xda, 0x4e, 0xda, 0x9e, 0xb8, 0x79, 0xe7,
	0x1b, 0xcd, 0xf7, 0xcd, 0x7c, 0x33, 0x06, 0xe2, 0x73, 0xb6, 0x48, 0x1c, 0x8e, 0xd4, 0x43, 0x3e,
	0x49, 0x38, 0x93, 0x8c, 0xb4, 0x42, 0xe6, 0xbb, 0xd4, 0x9d, 0xe3, 0x24, 0xbd, 0x34, 0x9f, 0xf8,
	0x8c, 0xf9, 0x21, 0x5a, 0x34, 0x09, 0x2c, 0x1a, 0xc7, 0x4c, 0x52, 0x19, 0xb0, 0x58, 0x64, 0xa9,
	0x66, 0x37, 0x9d, 0x5a, 0x18, 0xa7, 0x18, 0xb2, 0x04, 0xf3, 0x50, 0x1b, 0x7d, 0x8e, 0x22, 0x4f,
	0x18, 0xba, 0xd0, 0xbd, 0xf2, 0xbc, 0x19, 0x7b, 0xb7, 0xa2, 0xb1, 0xf1, 0xeb, 0x02, 0x85, 0x24,
	0x04, 0x1a, 0x31, 0x8d, 0xd0, 0xa8, 0x0d, 0x6a, 0x23, 0xdd, 0x56, 0xdf, 0xe4, 0x31, 0xe8, 0x82,
	0x2d, 0xb8, 0x8b, 0x4e, 0xe0, 0x19, 0x75, 0x05, 0x34, 0xb3, 0xc0, 0x7b, 0x8f, 0xf4, 0x01, 0x42,
	0xe6, 0xd2, 0xd0, 0x61, 0x71, 0xb8, 0x34, 0xb4, 0x41, 0x6d, 0xd4, 0xb4, 0x75, 0x15, 0xf9, 0x10,
	0x87, 0xcb, 0xe1, 0x31, 0x90, 0x22, 0x89, 0x48, 0x58, 0x2c, 0x70, 0x38, 0x87, 0x47, 0x36, 0x46,
	0x2c, 0xc5, 0xb7, 0x9c, 0x45, 0xff, 0x94, 0xbf, 0x07, 0x27, 0x5b, 0x4c, 0xb9, 0x88, 0x3f, 0x35,
	0x38, 0xca, 0x23, 0xd4, 0xbb, 0x8f, 0xff, 0x1c, 0xda, 0x3c, 0x83, 0x91, 0xaf, 0x25, 0x34, 0xec,
	0xd6, 0x26, 0x96, 0xa9, 0x10, 0x92, 0x72, 0xe9, 0xc8, 0x20, 0x42, 0xa5, 0x42, 0xb3, 0x75, 0x15,
	0x99, 0x05, 0x11, 0x92, 0x1e, 0x34, 0x31, 0xf6, 0x32, 0xb0, 0xa1, 0xc0, 0x03, 0x8c, 0x3d, 0x05,
	0x1d, 0xc3, 0x5e, 0x18, 0x44, 0x81, 0x34, 0xf6, 0x54, 0x3c, 0x7b, 0x90, 0x57, 0x70, 0xb8, 0xf6,
	0xce, 0x91, 0xcb, 0x04, 0x85, 0xb1, 0x3f, 0xd0, 0x46, 0x87, 0xd3, 0xde, 0xa4, 0xb0, 0x00, 0x93,
	0x37, 0x79, 0xca, 0x6c, 0x99, 0xa0, 0xdd, 0xc1, 0xc2, 0x4b, 0x54, 0xe6, 0x72, 0x50, 0x9d, 0xcb,
	0x47, 0xe8, 0x16, 0x7a, 0xcf, 0x26, 0x42, 0x5e, 0x80, 0xbe, 0x2e, 0x22, 0xd4, 0x04, 0x5a, 0xd3,
	0xfe, 0x8a, 0xd0, 0xe7, 0xe8, 0x53, 0xc9, 0xf8, 0x24, 0x9d, 0x6e, 0x38, 0x5f, 0x53, 0xe9, 0xce,
	0xed, 0xdb, 0xfc, 0xe1, 0x15, 0xb4, 0x1f, 0x74, 0xb2, 0x2c, 0xaa, 0x5e, 0x15, 0xf5, 0x09, 0x3a,
	0x25, 0x8b, 0xd4, 0x58, 0xd7, 0xce, 0xaf, 0x14, 0x69, 0x23, 0xdd, 0xd6, 0xd7, 0xd6, 0x0b, 0x72,
	0x01, 0x9d, 0xa2, 0x31, 0xc2, 0xa8, 0x0f, 0xb4, 0x51, 0xc3, 0x6e, 0x17, 0x9c, 0x11, 0xd3, 0x9f,
	0x1a, 0xb4, 0x36, 0xad, 0x22, 0x27, 0x29, 0xc0, 0xed, 0x46, 0x92, 0xd3, 0xd2, 0x40, 0xb7, 0xee,
	0xc1, 0x3c, 0xbb, 0x13, 0xcf, 0xb7, 0xe8, 0xd9, 0xb7, 0x5f, 0xbf, 0x7f, 0xd4, 0xcf, 0xcd, 0x33,
	0x2b, 0xbd, 0xb4, 0xd4, 0xc5, 0x5a, 0xd7, 0xab, 0x5e, 0x6f, 0xac, 0xeb, 0x8d, 0xf4, 0x97, 0xe3,
	0xf1, 0x0d, 0xf9, 0x5e, 0x83, 0xff, 0x2a, 0xab, 0x48, 0x2e, 0x4a, 0xd5, 0x77, 0x9f, 0x84, 0xf9,
	0xf4, 0xfe, 0xa4, 0xb2, 0x8e, 0xf1, 0x83, 0x3a, 0x1c, 0x68, 0xac, 0x26, 0x41, 0xfa, 0xa5, 0xb2,
	0xd5, 0x43, 0x30, 0x4f, 0xef, 0x82, 0x73, 0x3e, 0x43, 0xf1, 0x11, 0x72, 0x54, 0xe5, 0x23, 0x9f,
	0x61, 0x2f, 0xeb, 0xae, 0xb7, 0xab, 0x44, 0x56, 0xdd, 0xdc, 0x05, 0xe5, 0x95, 0xfb, 0xaa, 0xf2,
	0x09, 0xf9, 0x7f, 0xab, 0x93, 0x08, 0x25, 0xfd, 0xb2, 0xaf, 0xfe, 0x5e, 0xcf, 0xff, 0x06, 0x00,
	0x00, 0xff, 0xff, 0x07, 0x4a, 0xbd, 0xe7, 0x1f, 0x05, 0x00, 0x00,
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: orchestration.proto

package logcache_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Range struct {
	// start is the first hash within the given range. [start..end]
	Start uint64 `protobuf:"varint,1,opt,name=start" json:"start,omitempty"`
	// end is the last hash within the given range. [start..end]
	End uint64 `protobuf:"varint,2,opt,name=end" json:"end,omitempty"`
	// term is the term that the range was applied to. The term is ever
	// incrementing (managed by the scheduler algorithm). A range with a
	// larger term is preferred.
	Term uint64 `protobuf:"varint,3,opt,name=term" json:"term,omitempty"`
}

func (m *Range) Reset()                    { *m = Range{} }
func (m *Range) String() string            { return proto.CompactTextString(m) }
func (*Range) ProtoMessage()               {}
func (*Range) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *Range) GetStart() uint64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *Range) GetEnd() uint64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *Range) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

type Ranges struct {
	Ranges []*Range `protobuf:"bytes,1,rep,name=ranges" json:"ranges,omitempty"`
}

func (m *Ranges) Reset()                    { *m = Ranges{} }
func (m *Ranges) String() string            { return proto.CompactTextString(m) }
func (*Ranges) ProtoMessage()               {}
func (*Ranges) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *Ranges) GetRanges() []*Range {
	if m != nil {
		return m.Ranges
	}
	return nil
}

type AddRangeRequest struct {
	Range *Range `protobuf:"bytes,1,opt,name=range" json:"range,omitempty"`
}

func (m *AddRangeRequest) Reset()                    { *m = AddRangeRequest{} }
func (m *AddRangeRequest) String() string            { return proto.CompactTextString(m) }
func (*AddRangeRequest) ProtoMessage()               {}
func (*AddRangeRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *AddRangeRequest) GetRange() *Range {
	if m != nil {
		return m.Range
	}
	return nil
}

type AddRangeResponse struct {
}

func (m *AddRangeResponse) Reset()                    { *m = AddRangeResponse{} }
func (m *AddRangeResponse) String() string            { return proto.CompactTextString(m) }
func (*AddRangeResponse) ProtoMessage()               {}
func (*AddRangeResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

type ListRangesRequest struct {
}

func (m *ListRangesRequest) Reset()                    { *m = ListRangesRequest{} }
func (m *ListRangesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRangesRequest) ProtoMessage()               {}
func (*ListRangesRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

type ListRangesResponse struct {
	Ranges []*Range `protobuf:"bytes,1,rep,name=ranges" json:"ranges,omitempty"`
}

func (m *ListRangesResponse) Reset()                    { *m = ListRangesResponse{} }
func (m *ListRangesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListRangesResponse) ProtoMessage()               {}
func (*ListRangesResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

func (m *ListRangesResponse) GetRanges() []*Range {
	if m != nil {
		return m.Ranges
	}
	return nil
}

type SetRangesRequest struct {
	// The key is the address of the Log Cache node.
	Ranges map[string]*Ranges `protobuf:"bytes,1,rep,name=ranges" json:"ranges,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *SetRangesRequest) Reset()                    { *m = SetRangesRequest{} }
func (m *SetRangesRequest) String() string            { return proto.CompactTextString(m) }
func (*SetRangesRequest) ProtoMessage()               {}
func (*SetRangesRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{6} }

func (m *SetRangesRequest) GetRanges() map[string]*Ranges {
	if m != nil {
		return m.Ranges
	}
	return nil
}

type SetRangesResponse struct {
}

func (m *SetRangesResponse) Reset()                    { *m = SetRangesResponse{} }
func (m *SetRangesResponse) String() string            { return proto.CompactTextString(m) }
func (*SetRangesResponse) ProtoMessage()               {}
func (*SetRangesResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{7} }

func init() {
	proto.RegisterType((*Range)(nil), "logcache.v1.Range")
	proto.RegisterType((*Ranges)(nil), "logcache.v1.Ranges")
	proto.RegisterType((*AddRangeRequest)(nil), "logcache.v1.AddRangeRequest")
	proto.RegisterType((*AddRangeResponse)(nil), "logcache.v1.AddRangeResponse")
	proto.RegisterType((*ListRangesRequest)(nil), "logcache.v1.ListRangesRequest")
	proto.RegisterType((*ListRangesResponse)(nil), "logcache.v1.ListRangesResponse")
	proto.RegisterType((*SetRangesRequest)(nil), "logcache.v1.SetRangesRequest")
	proto.RegisterType((*SetRangesResponse)(nil), "logcache.v1.SetRangesResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Orchestration service

type OrchestrationClient interface {
	AddRange(ctx context.Context, in *AddRangeRequest, opts ...grpc.CallOption) (*AddRangeResponse, error)
	ListRanges(ctx context.Context, in *ListRangesRequest, opts ...grpc.CallOption) (*ListRangesResponse, error)
	SetRanges(ctx context.Context, in *SetRangesRequest, opts ...grpc.CallOption) (*SetRangesResponse, error)
}

type orchestrationClient struct {
	cc *grpc.ClientConn
}

func NewOrchestrationClient(cc *grpc.ClientConn) OrchestrationClient {
	return &orchestrationClient{cc}
}

func (c *orchestrationClient) AddRange(ctx context.Context, in *AddRangeRequest, opts ...grpc.CallOption) (*AddRangeResponse, error) {
	out := new(AddRangeResponse)
	err := grpc.Invoke(ctx, "/logcache.v1.Orchestration/AddRange", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestrationClient) ListRanges(ctx context.Context, in *ListRangesRequest, opts ...grpc.CallOption) (*ListRangesResponse, error) {
	out := new(ListRangesResponse)
	err := grpc.Invoke(ctx, "/logcache.v1.Orchestration/ListRanges", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestrationClient) SetRanges(ctx context.Context, in *SetRangesRequest, opts ...grpc.CallOption) (*SetRangesResponse, error) {
	out := new(SetRangesResponse)
	err := grpc.Invoke(ctx, "/logcache.v1.Orchestration/SetRanges", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Orchestration service

type OrchestrationServer interface {
	AddRange(context.Context, *AddRangeRequest) (*AddRangeResponse, error)
	ListRanges(context.Context, *ListRangesRequest) (*ListRangesResponse, error)
	SetRanges(context.Context, *SetRangesRequest) (*SetRangesResponse, error)
}

func RegisterOrchestrationServer(s *grpc.Server, srv OrchestrationServer) {
	s.RegisterService(&_Orchestration_serviceDesc, srv)
}

func _Orchestration_AddRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestrationServer).AddRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logcache.v1.Orchestration/AddRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestrationServer).AddRange(ctx, req.(*AddRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestration_ListRanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestrationServer).ListRanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logcache.v1.Orchestration/ListRanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestrationServer).ListRanges(ctx, req.(*ListRangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestration_SetRanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestrationServer).SetRanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logcache.v1.Orchestration/SetRanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestrationServer).SetRanges(ctx, req.(*SetRangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Orchestration_serviceDesc = grpc.ServiceDesc{
	ServiceName: "logcache.v1.Orchestration",
	HandlerType: (*OrchestrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRange",
			Handler:    _Orchestration_AddRange_Handler,
		},
		{
			MethodName: "ListRanges",
			Handler:    _Orchestration_ListRanges_Handler,
		},
		{
			MethodName: "SetRanges",
			Handler:    _Orchestration_SetRanges_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orchestration.proto",
}

func init() { proto.RegisterFile("orchestration.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 342 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xc1, 0x4e, 0xfa, 0x40,
	0x10, 0xc6, 0xff, 0x0b, 0x94, 0xfc, 0x99, 0xc6, 0x88, 0x83, 0x87, 0xa6, 0x11, 0x24, 0x7b, 0x02,
	0x0f, 0x4d, 0x44, 0x0f, 0x46, 0x2f, 0x12, 0xe3, 0xc1, 0x84, 0x48, 0x52, 0x9f, 0xa0, 0xb6, 0x1b,
	0x20, 0x62, 0x17, 0x77, 0x17, 0x12, 0x1e, 0xc8, 0x87, 0xf4, 0x66, 0xba, 0xdb, 0x42, 0x5b, 0xac,
	0x89, 0xb7, 0xe9, 0x37, 0x5f, 0x7f, 0x3b, 0xf3, 0xed, 0x42, 0x87, 0x8b, 0x70, 0xce, 0xa4, 0x12,
	0x81, 0x5a, 0xf0, 0xd8, 0x5b, 0x09, 0xae, 0x38, 0xda, 0x4b, 0x3e, 0x0b, 0x83, 0x70, 0xce, 0xbc,
	0xcd, 0x25, 0x7d, 0x00, 0xcb, 0x0f, 0xe2, 0x19, 0xc3, 0x53, 0xb0, 0xa4, 0x0a, 0x84, 0x72, 0x48,
	0x9f, 0x0c, 0x1a, 0xbe, 0xf9, 0xc0, 0x36, 0xd4, 0x59, 0x1c, 0x39, 0x35, 0xad, 0x25, 0x25, 0x22,
	0x34, 0x14, 0x13, 0xef, 0x4e, 0x5d, 0x4b, 0xba, 0xa6, 0xd7, 0xd0, 0xd4, 0x10, 0x89, 0x17, 0xd0,
	0x14, 0xba, 0x72, 0x48, 0xbf, 0x3e, 0xb0, 0x47, 0xe8, 0xe5, 0x0e, 0xf3, 0xb4, 0xc9, 0x4f, 0x1d,
	0xf4, 0x0e, 0x8e, 0xc7, 0x51, 0x64, 0x34, 0xf6, 0xb1, 0x66, 0x52, 0xe1, 0x00, 0x2c, 0xdd, 0xd4,
	0x43, 0xfc, 0xfc, 0xb7, 0x31, 0x50, 0x84, 0xf6, 0xfe, 0x67, 0xb9, 0xe2, 0xb1, 0x64, 0xb4, 0x03,
	0x27, 0x93, 0x85, 0x54, 0x66, 0x94, 0x14, 0x49, 0xef, 0x01, 0xf3, 0xa2, 0xb1, 0xfe, 0x69, 0xce,
	0x4f, 0x02, 0xed, 0x17, 0x56, 0xc4, 0xe2, 0xb8, 0x04, 0x18, 0x16, 0x00, 0x65, 0xbb, 0x21, 0xca,
	0xc7, 0x58, 0x89, 0x6d, 0xc6, 0x75, 0x9f, 0xc1, 0xce, 0xc9, 0x49, 0xd4, 0x6f, 0x6c, 0xab, 0x37,
	0x6f, 0xf9, 0x49, 0x89, 0x43, 0xb0, 0x36, 0xc1, 0x72, 0xcd, 0x74, 0xfc, 0xf6, 0xa8, 0x73, 0x38,
	0xa3, 0xf4, 0x8d, 0xe3, 0xb6, 0x76, 0x43, 0x92, 0xf5, 0x73, 0xe7, 0x9a, 0x45, 0x47, 0x5f, 0x04,
	0x8e, 0xa6, 0xf9, 0x47, 0x80, 0x4f, 0xf0, 0x3f, 0x4b, 0x0e, 0xcf, 0x0a, 0xc8, 0xd2, 0x6d, 0xb8,
	0xdd, 0x8a, 0x6e, 0x1a, 0xf7, 0x3f, 0x9c, 0x02, 0xec, 0xb3, 0xc5, 0x5e, 0xc1, 0x7e, 0x70, 0x13,
	0xee, 0x79, 0x65, 0x7f, 0x07, 0x9c, 0x40, 0x6b, 0xb7, 0x02, 0x76, 0x7f, 0x8d, 0xd4, 0xed, 0x55,
	0xb5, 0x33, 0xda, 0x6b, 0x53, 0xbf, 0xf7, 0xab, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x80, 0x30,
	0xa9, 0xbb, 0x06, 0x03, 0x00, 0x00,
}
